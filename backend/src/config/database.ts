import Database from 'better-sqlite3';
import path from 'path';
import fs from 'fs';

// Âà§Êñ∑ÊòØÂê¶ÁÇ∫ production Ê®°Âºè
const isProd = process.env.NODE_ENV === 'production';

// üîß ÂãïÊÖãÊäìÂèñ resourcesPathÔºàËß£Ê±∫ÊâìÂåÖÂæå SQLite ÁÑ°Ê≥ïËÆÄÂèñÔºâ
const resourcesPath = isProd
  ? (process as any).resourcesPath // ÊâìÂåÖÂæåÁÇ∫ resources Ë≥áÊñôÂ§æ
  : path.resolve(__dirname, '..', '..');

// üîó ÁµÑÂá∫Ë≥áÊñôÂ∫´Ë∑ØÂæë
const dbPath = path.join(resourcesPath, 'data', 'data.db');

// ‚úÖ ÈÅøÂÖç production Ê®°Âºè‰∏ãË™§Âª∫Á©∫ DB
if (isProd && !fs.existsSync(dbPath)) {
  throw new Error(`‚ùå Êâæ‰∏çÂà∞Ë≥áÊñôÂ∫´Ê™îÊ°àÔºö${dbPath}`);
}

// ‚úÖ ÈñãÁôºÊ®°ÂºèÊâçËá™ÂãïÂª∫Á´ãË≥áÊñôÂ§æ
if (!isProd) {
  const dataDir = path.dirname(dbPath);
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }
}

// üß† ÈÄ£Á∑ö SQLite
const db = new Database(dbPath);
console.log(`‚úÖ ÊàêÂäüÈÄ£Êé• SQLiteÔºö${dbPath}`);

// ‚úÖ ÂàùÂßãÂåñË≥áÊñôË°®
(async () => {
  await db.exec(`
    CREATE TABLE IF NOT EXISTS TB_PATH (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      serverType TEXT,
      name TEXT,
      path TEXT
    )
  `);
  await db.exec(`
    CREATE TABLE IF NOT EXISTS TB_FILETYPE (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT,
      type TEXT,
      fileType TEXT
    )
  `);
  await db.exec(`
    CREATE TABLE IF NOT EXISTS TB_USERINFO (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT,
      compressedDir TEXT,
      zipType TEXT
    )
  `);
  await db.exec(`
    CREATE TABLE IF NOT EXISTS TB_QRCODE (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      txncode TEXT NOT NULL,
      hostmsg TEXT,
      description TEXT NOT NULL,
      original_text TEXT NOT NULL,
      qrcodes TEXT NOT NULL,
      createTime DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);
  console.log('‚úÖ Ë≥áÊñôË°®ÂàùÂßãÂåñÂÆåÊàê');
})();

export default db;
